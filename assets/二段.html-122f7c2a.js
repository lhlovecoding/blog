import{_ as a,o as r,c as e,d as t}from"./app-b664dfa1.js";const i={},c=t('<h1 id="第一周" tabindex="-1"><a class="header-anchor" href="#第一周" aria-hidden="true">#</a> <strong>第一周</strong></h1><h2 id="day1-1-课程介绍" tabindex="-1"><a class="header-anchor" href="#day1-1-课程介绍" aria-hidden="true">#</a> Day1.1 课程介绍</h2><h3 id="js在互联网的角色" tabindex="-1"><a class="header-anchor" href="#js在互联网的角色" aria-hidden="true">#</a> <strong>js在互联网的角色</strong></h3><p>界面呈现、特效制作、用户交互、服务器通信、优化体验、构建全栈应用程序...</p><h3 id="js的发展历史" tabindex="-1"><a class="header-anchor" href="#js的发展历史" aria-hidden="true">#</a> js的发展历史</h3><p>1995年：最早的JavaScript。由Netscape公司（现在的Mozilla）的Brendan Eich开发而成，最初命名为&quot;LiveScript&quot;，后来改名为&quot;JavaScript&quot;。JavaScript的目标是为网页添加动态和交互性。</p><p>1996年：IE的JScript。微软推出了自己的JavaScript实现，命名为&quot;JScript&quot;，并集成到Internet Explorer浏览器中。这促进了JavaScript的普及，并使其成为主流的浏览器脚本语言。</p><p>1997年：ECMAScript标准化。为了确保JavaScript的跨平台和互操作性，欧洲计算机制造商协会（ECMA）制定了ECMAScript标准。ECMAScript定义了JavaScript的基础语法、数据类型、操作符等规范，从而使不同的JavaScript实现能够相互兼容。</p><p>2004年：AJAX的出现。AJAX（Asynchronous JavaScript and XML）的概念被提出，它利用JavaScript和XML实现了异步数据传输和无需刷新页面即可更新内容的能力，极大地改善了用户体验。</p><p>2006年：jQuery的发布。jQuery是一个流行的JavaScript库，简化了JS与HTML文档交互、事件处理、动画效果等方面的开发。它大幅简化了JavaScript编程，并提供了跨浏览器兼容性解决方案。</p><p>2009年：Node.js的出现。由Ryan Dahl开发的Node.js使JavaScript脱离了浏览器环境，可以在服务器端用于构建高性能和可扩展的网络应用程序。这对于JavaScript的应用范围和生态系统产生了革命性的影响。</p><p>2015年：ECMAScript 2015（ES6）发布。ES6引入了许多新的语言特性和改进，如箭头函数、模块化、类等，显著提升了JavaScript的开发效率和可维护性。</p><p>之后的发展：自2015年以来，ECMAScript每年都在发布新的版本，持续改进和丰富了JavaScript的功能和语法。例如，ES7引入了async/await等异步编程的语法糖，ES8引入了对象属性的更多操作和函数参数的展开语法等。</p><h3 id="js的运行环境" tabindex="-1"><a class="header-anchor" href="#js的运行环境" aria-hidden="true">#</a> js的运行环境</h3><p>JavaScript可以在多个不同的运行环境中执行。以下是一些常见的JavaScript运行环境：</p><p>浏览器环境：最常见的JavaScript运行环境是浏览器。现代的Web浏览器（如Chrome、Firefox、Safari和Edge）都内置了JavaScript解析器，可以直接在浏览器中执行JavaScript代码。JavaScript通过操作文档对象模型（DOM）和浏览器提供的API，实现与用户的交互、动态更新网页内容等功能。</p><p>服务器环境：JavaScript也可以在服务器端运行。Node.js是一个基于V8引擎的JavaScript运行时，它使得开发者能够使用JavaScript来编写服务器端应用程序。Node.js提供了许多内置模块和包管理工具，方便开发者进行服务器端的网络通信、文件操作等任务。</p><p>移动应用环境：JavaScript还可以用于开发移动应用程序。通过使用跨平台开发框架（如React Native、Ionic和Flutter），开发者可以使用JavaScript来构建跨平台的原生移动应用。这些框架将JavaScript代码转换为原生代码，以便在iOS和Android等移动平台上运行。</p><p>桌面应用环境：JavaScript也可以用于构建桌面应用程序。Electron是一个开源的桌面应用开发框架，它使用JavaScript、HTML和CSS来构建跨平台的桌面应用程序。许多知名的应用程序，如Visual Studio Code、Slack和Atom等，都是使用Electron开发的。</p><p>嵌入式设备环境：随着物联网的发展，JavaScript也开始在嵌入式设备上运行。例如，一些智能家居产品和传感器使用JavaScript作为其控制和交互的脚本语言。</p><h3 id="js的使用方式" tabindex="-1"><a class="header-anchor" href="#js的使用方式" aria-hidden="true">#</a> js的使用方式</h3><h4 id="第一行代码" tabindex="-1"><a class="header-anchor" href="#第一行代码" aria-hidden="true">#</a> 第一行代码</h4><h3 id="day1-2-变量" tabindex="-1"><a class="header-anchor" href="#day1-2-变量" aria-hidden="true">#</a> Day1.2 变量</h3><h3 id="day1-3-课程介绍" tabindex="-1"><a class="header-anchor" href="#day1-3-课程介绍" aria-hidden="true">#</a> Day1.3 课程介绍</h3><h3 id="day1-4-课程介绍" tabindex="-1"><a class="header-anchor" href="#day1-4-课程介绍" aria-hidden="true">#</a> Day1.4 课程介绍</h3>',25),d=[c];function p(h,n){return r(),e("div",null,d)}const o=a(i,[["render",p],["__file","二段.html.vue"]]);export{o as default};
